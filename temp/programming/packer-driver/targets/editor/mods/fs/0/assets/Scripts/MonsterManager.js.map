{"version":3,"sources":["file:///D:/Craft-Monsters/Craft-Monsters/assets/Scripts/MonsterManager.ts"],"names":["_decorator","Component","Prefab","find","resources","instantiate","director","Vec3","RigidBody2D","view","log","warn","GameManager","ccclass","property","MonsterManager","onLoad","_visibleSize","getVisibleSize","start","on","State","CRAFT","_craftMonster","_canvas","touchMove","event","_curMonsterPrefab","_touchX","getUILocation","x","followTouchPos","height","setWorldPosition","touch","touchPos","touchEnd","monsterLevel","Number","name","slice","monsterLeft","_cur_level_1","_cur_level_2","_cur_level_3","emit","MONSTER_CHANGE","curMonsteRigidBody","getComponent","wakeUp","scheduleOnce","spawnMonsterOnce","_monsterSpawnList","_nextSpawnIndex","path","initPos","width","_loadPrefab","generateMonsterSpawnList","max_level_1","max_level_2","max_level_3","maxLegth","randomNum","i","length","Math","ceil","random","push","INIT","curMonsterName","_curMonsterPos","_inProcess","nextMonsterLevel","nextMonsterPath","GameState","GAME_WIN","clearLevel","canvas","node","children","destroy","prefabPath","prefabPos","worldPosition","load","err","prefab","setParent","monster","setPosition"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Prefab, find, resources, instantiate, director, Vec3, EventTouch, RigidBody2D, view, Size, tween, UITransform, log, warn } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { Utils } from './Utils';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterManager')\r\nexport class MonsterManager extends Component {\r\n\r\n\r\n    private _inProcess: boolean = false\r\n    private _canvas: Node = null!\r\n    private _visibleSize: Size = null!\r\n    private _touchX: number = null!\r\n\r\n    private _curMonsterPrefab: Node = null! // 当前通过 touch 来操作移动的怪物\r\n\r\n    private _cur_level_1: number = 0 // 当前 _monsterSpawnList 数组里有几个 monster_1\r\n    private _cur_level_2: number = 0\r\n    private _cur_level_3: number = 0\r\n    private _monsterSpawnList: number[] = []\r\n    private _nextSpawnIndex: number = 0 // 在数组里，下一个要生成怪物的 index\r\n\r\n\r\n    onLoad() {\r\n        this._visibleSize = view.getVisibleSize()\r\n    }\r\n\r\n\r\n    start() {\r\n        director.on(GameManager.State.CRAFT, this._craftMonster, this)\r\n        this._canvas = find('Canvas')!\r\n    }\r\n\r\n\r\n    public touchMove(event: EventTouch) {\r\n        if (this._curMonsterPrefab) {\r\n            this._touchX = event.getUILocation().x\r\n            let followTouchPos = new Vec3(this._touchX, this._visibleSize.height * 0.8, 0) // 世界坐标\r\n            this._curMonsterPrefab.setWorldPosition(followTouchPos)\r\n        }\r\n    }\r\n\r\n\r\n    public touch(event: EventTouch) {\r\n        if (this._curMonsterPrefab) {\r\n            this._touchX = event.getUILocation().x\r\n            let touchPos = new Vec3(this._touchX, this._visibleSize.height * 0.8, 0) // 世界坐标\r\n            this._curMonsterPrefab.setWorldPosition(touchPos)\r\n        }\r\n    }\r\n\r\n\r\n    public touchEnd(event: EventTouch) {\r\n        if (this._curMonsterPrefab) {\r\n            \r\n            let monsterLevel = Number(this._curMonsterPrefab.name.slice(-1))\r\n            let monsterLeft = 0\r\n            switch (monsterLevel) {\r\n                case 1:\r\n                    monsterLeft = --this._cur_level_1\r\n                    break\r\n                case 2:\r\n                    monsterLeft = --this._cur_level_2\r\n                    break\r\n                case 3:\r\n                    monsterLeft = --this._cur_level_3\r\n                    break\r\n            }\r\n            director.emit(GameManager.State.MONSTER_CHANGE, monsterLevel, monsterLeft)\r\n\r\n            let curMonsteRigidBody = this._curMonsterPrefab.getComponent(RigidBody2D)\r\n            this._curMonsterPrefab = null!\r\n            curMonsteRigidBody!.wakeUp() // 唤醒刚体\r\n            \r\n            \r\n            this.scheduleOnce(() => {\r\n                this.spawnMonsterOnce() // 一秒后生成下一只怪物\r\n            }, 1)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public spawnMonsterOnce() { // 根据数组一次一次来生成怪物\r\n        let monsterLevel = this._monsterSpawnList[this._nextSpawnIndex]\r\n        let path = `monsters/monster_${monsterLevel}`\r\n        let initPos = new Vec3(this._visibleSize.width * 0.5, this._visibleSize.height * 0.8, 0) // 50% 宽、80% 高处显示\r\n\r\n        this._loadPrefab(path, initPos, true)\r\n        //this._curMonsterPrefab = Utils.loadPrefab(path, this._canvas, initPos, true)\r\n        //log(\"this._curMonsterPrefab\", this._curMonsterPrefab)\r\n\r\n        this._nextSpawnIndex += 1\r\n    }\r\n\r\n\r\n    public generateMonsterSpawnList() {\r\n        \r\n        /*\r\n            let min_level_1: number = 16\r\n            let min_level_2: number = 8\r\n            let min_level_3: number = 4\r\n\r\n            至少需要 16 个 monster_1,\r\n            8 个 monster_2,\r\n            4 个 monster_3,\r\n            4 个 monster_3 可以合成 2 个最终怪物的一半\r\n            而 2 个最终怪物的一半 可以合成最终的大怪物，取得游戏胜利\r\n        */\r\n\r\n        this._monsterSpawnList = [1,] // 开始时第一个怪物指定是 monster_1\r\n        this._nextSpawnIndex = 0\r\n        this._cur_level_1 = 0\r\n        this._cur_level_2 = 0\r\n        this._cur_level_3 = 0\r\n\r\n        let max_level_1: number = 20\r\n        let max_level_2: number = 10\r\n        let max_level_3: number = 6\r\n        let maxLegth: number = max_level_1 + max_level_2 + max_level_3 // 数组 maxLenth\r\n        let randomNum: number = 0\r\n\r\n        for (let i = 1; this._monsterSpawnList.length !== maxLegth; i++) { // 从 1 开始，数组长度直到满足 maxLegth 才停止循环\r\n            \r\n            randomNum = Math.ceil(Math.random() * 3) // 向上取值，避免取到 0\r\n            switch (randomNum) {\r\n                case 1:\r\n                    if (this._cur_level_1 < max_level_1) { // 如果当前数组的 1 数量小于 max_1\r\n                        this._monsterSpawnList.push(randomNum)\r\n                        this._cur_level_1++\r\n                    }\r\n                    break\r\n                case 2:\r\n                    if (this._cur_level_2 < max_level_2) {\r\n                        this._monsterSpawnList.push(randomNum)\r\n                        this._cur_level_2++\r\n                    }\r\n                    break\r\n                case 3:\r\n                    if (this._cur_level_3 < max_level_3) {\r\n                        this._monsterSpawnList.push(randomNum)\r\n                        this._cur_level_3++\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n\r\n        director.emit(GameManager.State.INIT, this._cur_level_1, this._cur_level_2, this._cur_level_3)\r\n        log(\"this._monsterSpawnList generated\", this._monsterSpawnList)\r\n    }\r\n\r\n\r\n    private _craftMonster(curMonsterName: string, _curMonsterPos: Vec3) { // 两同等级怪物碰撞时生成下一级怪物\r\n\r\n        if (!this._inProcess) {\r\n            this._inProcess = true // 占用\r\n        \r\n            let nextMonsterLevel: number = null!\r\n            let nextMonsterPath: string = null!\r\n\r\n            if (curMonsterName === 'monster_3') {\r\n                nextMonsterPath = 'monsters/monster_4_half'\r\n            } else if (curMonsterName === 'monster_4_half') { // 游戏胜利\r\n                director.emit(GameManager.GameState.GAME_WIN)\r\n\r\n                nextMonsterPath = 'monsters/monster_4'\r\n                this._loadPrefab(nextMonsterPath, _curMonsterPos)\r\n\r\n                this.scheduleOnce(() => {\r\n                    this._inProcess = false // 释放占用\r\n                }, 0.1)\r\n                return\r\n            } else {\r\n                nextMonsterLevel = Number(curMonsterName.slice(-1)) + 1\r\n                nextMonsterPath = `monsters/monster_${nextMonsterLevel}`\r\n            }\r\n\r\n            this._loadPrefab(nextMonsterPath, _curMonsterPos)\r\n\r\n            this.scheduleOnce(() => {\r\n                this._inProcess = false // 释放占用\r\n            }, 0.1)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public clearLevel() {\r\n        this._curMonsterPrefab = null!\r\n\r\n        let canvas: Node = find('Canvas')!\r\n        for (let node of canvas.children) {\r\n            if (node.name.slice(0,7) === 'monster') { // 销毁名字以 monster 开头的节点\r\n                node.destroy()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _loadPrefab(prefabPath: string, prefabPos: Vec3, worldPosition: boolean = false) {\r\n        resources.load(prefabPath, Prefab, (err: any, prefab: Prefab) => {\r\n            if (err) {\r\n                warn(\"err:\", err)\r\n            }\r\n\r\n            if (worldPosition) {\r\n                // worldPosition 为真，即当前是通过 touch 方式触发来生成的怪物\r\n\r\n                this._curMonsterPrefab = instantiate(prefab) as Node\r\n\r\n                this._curMonsterPrefab.setParent(find('Canvas'))\r\n                this._curMonsterPrefab.setWorldPosition(prefabPos)\r\n            } else {\r\n                // worldPosition 为假，即当前是通过两个同等级怪物碰撞而生成的怪物\r\n\r\n                let monster = instantiate(prefab) as Node\r\n\r\n                monster.setParent(find('Canvas'))\r\n                monster.setPosition(prefabPos)\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n\r\n}\r\n\r\n"]}